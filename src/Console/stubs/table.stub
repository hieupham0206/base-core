<?php

namespace DummyNamespace;

use App\Models\{{modelName}};
TableNamespace

class {{modelName}}Table extends DataTable {
    /**
     * @return array
     * @throws \ReflectionException
     * @throws \Exception
     */
	public function getData(): array {
		$this->column = $this->getSortColumn();
		${{crudNameSingular}}s       = $this->getModels();
		$dataArray    = [];
		$modelName    = (new {{modelName}})->classLabel(true);

        $canEdit{{modelName}} = can('edit_{{permissionName}}');
        $canDelete{{modelName}} = can('delete_{{permissionName}}');

		/** @var {{modelName}}[] ${{crudNameSingular}}s */
		foreach ( ${{crudNameSingular}}s as ${{crudNameSingular}} ) {
		    $htmlAction = $this->generateButton($modelName, ${{crudNameSingular}}, [$canEdit{{modelName}}, $canDelete{{modelName}}]);

			$dataArray[] = [
				'<label class="kt-checkbox kt-checkbox--single kt-checkbox--brand"><input type="checkbox" value="'.${{crudNameSingular}}->id.'"><span></span></label>',
				{{tableValue}}
				$htmlAction
			];
		}

		return $dataArray;
	}

	public function getSortColumn(): string {
		$column = $this->column;

		switch ( $column ) {
		    {{tableSort}}
			default:
				$column = '{{crudName}}.id';
				break;
		}

		return $column;
	}

	/**
	 * @return {{modelName}}[]|\Illuminate\Database\Eloquent\Builder[]|\Illuminate\Database\Eloquent\Collection
	 */
	public function getModels() {
		${{crudNameSingular}}s = {{modelName}}::query();

		$this->totalFilteredRecords = $this->totalRecords = ${{crudNameSingular}}s->count();

        if ($this->isFilterNotEmpty) {
            ${{crudNameSingular}}s->filters($this->filters);

            $this->totalFilteredRecords = ${{crudNameSingular}}s->count();
        }

		return ${{crudNameSingular}}s->limit( $this->length )->offset( $this->start )
		                 ->orderBy( $this->column, $this->direction )->get();
	}

    /**
     * @param $modelName
     * @param {{modelName}} ${{crudNameSingular}}
     * @param $permissions
     *
     * @return string
     */
	protected function generateButton($modelName, ${{crudNameSingular}}, $permissions): string {
	    [$canEdit{{modelName}}, $canDelete{{modelName}}] = $permissions;

	    $btnEdit = $btnDelete = '';

        if ($canEdit{{modelName}}) {
            $btnEdit = ' <a href="' . route( '{{crudName}}.edit', ${{crudNameSingular}}, false ) . '" class="btn btn-sm btn-primary btn-circle btn-icon btn-edit" title="' . __( 'Edit' ) . '">
                <i class="fa fa-edit"></i>
            </a>';
        }

        if ($canDelete{{modelName}}) {
            $btnDelete = ' <button type="button" data-title="'.__('Delete').' ' . $modelName . ' ' . ${{crudNameSingular}}->name . ' !!!" class="btn btn-sm btn-danger btn-circle btn-icon btn-delete"  title="' . __( 'Delete' ). '"
            data-url="' . route( '{{crudName}}.destroy', ${{crudNameSingular}}, false ) . '">
                <i class="fa fa-trash"></i>
            </button>';
        }

        $htmlAction = '<a href="' . route( '{{crudName}}.show', ${{crudNameSingular}}, false ) . '" class="btn btn-sm btn-info btn-circle btn-icon" title="' . __( 'View' ) . '">
                      					<i class="fa fa-eye"></i>
                      				</a>' . $btnEdit . $btnDelete;

        return $htmlAction;
	}
}