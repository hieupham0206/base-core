<?php

namespace DummyNamespace;

BaseController
use App\Models\{{modelName}};
use Cloudteam\BaseCore\Utils\ModelFilter;
use Cloudteam\BaseCore\Tables\TableFacade;
TableNamespace
use Illuminate\{Http\Request, Http\JsonResponse, Http\RedirectResponse};

class DummyClass extends Controller
{
     /**
      * Tên dùng để phân quyền
      * @var string
      */
	 protected $name = '{{tableNameSingular}}';

    /**
     * @return \Illuminate\View\View
     */
    public function index()
    {
        ${{crudNameSingular}} = new {{modelName}};

        return view( '{{viewName}}.index', [
            '{{crudNameSingular}}' => ${{crudNameSingular}},
            'headerConfigs' => [
                'model' => ${{crudNameSingular}},
                'caption' => ${{crudNameSingular}}->label('list'),
                'createUrl' => route('{{routeName}}.create'),
                'buttons' => []
            ]
        ] );
    }

    /**
     * @return string
     */
    public function table() {
    	return ( new TableFacade( new {{modelName}}Table() ) )->getDataTable();
    }

    /**
     * @return \Illuminate\View\View
     */
    public function create()
    {
        return view('{{viewName}}.create', [
            '{{crudNameSingular}}' => new {{modelName}},
            'action' => route('{{routeName}}.store', [], false)
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @return RedirectResponse|JsonResponse
     * @throws \Illuminate\Validation\ValidationException
     * @throws \Exception
     */
    public function store(Request $request)
    {
        {{validationRules}}
        $requestData = $request->all();

        try {
            \DB::beginTransaction();

            {{modelName}}::create($requestData);

            \DB::commit();

            if ($request->wantsJson()) {
                return $this->asJson([
                    'message' => __('Data created successfully'),
                    'redirect_url' => route('{{routeName}}.index')
                ]);
            }

            return redirect(route('{{routeName}}.index'))->with('message', __( 'Data created successfully' ));
        } catch (\Exception $e) {
            \DB::rollBack();

            if ($request->wantsJson()) {
                return $this->asJson([
                    'message'      => "{$e->getMessage()} - {$e->getFile()}} - {$e->getLine()}",
                ], 500);
            }

            throw($e);
        }
    }

    /**
     * @param  {{modelName}} ${{crudNameSingular}}
     * @return \Illuminate\View\View
     */
    public function show({{modelName}} ${{crudNameSingular}})
    {
        return view('{{viewName}}.show', [
            '{{crudNameSingular}}' => ${{crudNameSingular}}
        ]);
    }

    /**
     * @param  {{modelName}} ${{crudNameSingular}}
     * @return \Illuminate\View\View
     */
    public function edit({{modelName}} ${{crudNameSingular}})
    {
        return view('{{viewName}}.edit', [
            '{{crudNameSingular}}' => ${{crudNameSingular}},
            'method' => 'put',
            'action' => route('{{routeName}}.update', ${{crudNameSingular}}, false)
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param  {{modelName}} ${{crudNameSingular}}
     * @return RedirectResponse|JsonResponse
     * @throws \Illuminate\Validation\ValidationException
     * @throws \Exception
     */
    public function update(Request $request, {{modelName}} ${{crudNameSingular}})
    {
        {{validationRules}}

        try {
            \DB::beginTransaction();

            $requestData = $request->all();
            ${{crudNameSingular}}->update($requestData);

            \DB::commit();

            if ($request->wantsJson()) {
                return $this->asJson([
                    'message' => __('Data edited successfully'),
                    'redirect_url' => route('{{routeName}}.index')
                ]);
            }

            return redirect(route('{{routeName}}.index'))->with('message', __( 'Data edited successfully' ));
        } catch (\Exception $e) {
            \DB::rollBack();

            if ($request->wantsJson()) {
                return $this->asJson([
                    'message'      => "{$e->getMessage()} - {$e->getFile()}} - {$e->getLine()}",
                ], 500);
            }

            throw($e);
        }
    }

    /**
     * @param {{modelName}} ${{crudNameSingular}}
     * @return JsonResponse
     */
    public function destroy({{modelName}} ${{crudNameSingular}})
    {
        try {
        	  ${{crudNameSingular}}->delete();
        } catch ( \Exception $e ) {
            return $this->asJson( [
                'message' => "Error: {$e->getMessage()}"
            ], $e->getCode() );
        }

        return $this->asJson( [
            'message' => __('Data deleted successfully')
        ] );
    }

    /**
     * @return mixed|\Symfony\Component\HttpFoundation\ParameterBag
     * @throws \Exception
     */
    public function destroys() {
        try {
            $ids = \request()->get( 'ids' );
            {{modelName}}::destroy( $ids );
        } catch ( \Exception $e ) {
            return $this->asJson( [
                'message' => "Error: {$e->getMessage()}"
            ], $e->getCode() );
        }

        return $this->asJson( [
            'message' => __( 'Data deleted successfully' )
        ] );
    }

    /**
     * @return \Illuminate\Http\JsonResponse
     */
    public function {{crudName}}() {
        $modelFilter = new ModelFilter({{modelName}}::query());

        ${{crudName}} = $modelFilter->filter()->selectRaw('id, name');

        $totalCount = ${{crudName}}->count();
        ${{crudName}}  = $modelFilter->getData(${{crudName}});

        return $this->asJson([
            'total_count' => $totalCount,
            'items'       => ${{crudName}}->toArray(),
        ]);
    }
}
