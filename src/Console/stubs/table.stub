<?php

namespace DummyNamespace;

use App\Models\{{modelName}};
TableNamespace

class {{modelName}}Table extends DataTable {
    /**
     * @return array
     * @throws \ReflectionException
     * @throws \Exception
     */
	public function getData(): array {
		$this->column = $this->getSortColumn();
		${{crudNameSingular}}s       = $this->getModels();
		$dataArray    = [];
		$modelName    = (new {{modelName}})->classLabel(true);

        [$canEdit{{modelName}}, $canDelete{{modelName}}] = cans(['edit_{{permissionName}}', 'delete_{{permissionName}}']);

		/** @var {{modelName}}[] ${{crudNameSingular}}s */
		foreach ( ${{crudNameSingular}}s as ${{crudNameSingular}} ) {
		    $htmlAction = $this->generateButton($modelName, ${{crudNameSingular}}, [$canEdit{{modelName}}, $canDelete{{modelName}}]);

			$dataArray[] = [
				'<label class="kt-checkbox kt-checkbox--single kt-checkbox--brand"><input type="checkbox" value="'.${{crudNameSingular}}->id.'"><span></span></label>',
				{{tableValue}}
				$htmlAction
			];
		}

		return $dataArray;
	}

	public function getSortColumn(): string {
		$column  = $this->column;
        $columns = ['{{crudName}}.id', {{tableSort}}];

        return $columns[$column];
	}

	/**
	 * @return {{modelName}}[]|\Illuminate\Database\Eloquent\Builder[]|\Illuminate\Database\Eloquent\Collection
	 */
	public function getModels() {
		${{crudNameSingular}}s = {{modelName}}::query();

		$this->totalFilteredRecords = $this->totalRecords = ${{crudNameSingular}}s->count();

        if ($this->isFilterNotEmpty) {
            ${{crudNameSingular}}s->filters($this->filters);

            $this->totalFilteredRecords = ${{crudNameSingular}}s->count();
        }

		return ${{crudNameSingular}}s->limit( $this->length )->offset( $this->start )
		                 ->orderBy( $this->column, $this->direction )->get();
	}

    /**
     * @param $modelName
     * @param {{modelName}} ${{crudNameSingular}}
     * @param $permissions
     *
     * @return string
     */
	protected function generateButton($modelName, ${{crudNameSingular}}, $permissions): string {
	    [$canEdit{{modelName}}, $canDelete{{modelName}}] = $permissions;

	    $buttonEdit = $buttonDelete = '';

        if ($canEdit{{modelName}}) {
            $buttonEdit = sprintf(" <a href='%s' class='btn-index-edit' title='%s'><i class='fa fa-edit'></i></a>", ${{crudNameSingular}}->getEditLink(), __('Edit'));
        }

        if ($canDelete{{modelName}}) {
            $buttonDelete = sprintf(" <button type='button' class='btn-index-delete' data-title='%s' data-url='%s' title='%s'><i class='fa fa-trash'></i></button>",
                            __('Delete') . " $modelName  ${{crudNameSingular}}->username", ${{crudNameSingular}}->getDestroyLink(), __('Delete'));
        }

        $buttonView = sprintf(' <a href="%s" class="btn-index-view" title="%s"><i class="fa fa-eye"></i></a>', ${{crudNameSingular}}->getViewLink(), __('View'));

        return $buttonView . $buttonEdit . $buttonDelete;
	}
}
