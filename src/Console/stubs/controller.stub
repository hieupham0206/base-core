<?php

namespace DummyNamespace;

BaseController
use App\Models\{{modelName}};
use Cloudteam\BaseCore\Tables\TableFacade;
TableNamespace
use Illuminate\Http\Request;

class DummyClass extends Controller
{
     /**
      * Tên dùng để phân quyền
      * @var string
      */
	 protected $name = '{{tableNameSingular}}';

    /**
     * @return \Illuminate\View\View
     */
    public function index()
    {
        return view( '{{viewName}}.index' )->with('{{crudNameSingular}}', new {{modelName}});
    }

    /**
     * @return string
     */
    public function table() {
    	return ( new TableFacade( new {{modelName}}Table() ) )->getDataTable();
    }

    /**
     * @return \Illuminate\View\View
     */
    public function create()
    {
        return view('{{viewName}}.create', [
            '{{crudNameSingular}}' => new {{modelName}},
            'action' => route('{{routeName}}.store')
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request)
    {
        {{validationRules}}
        $requestData = $request->all();
        ${{crudNameSingular}} = {{modelName}}::create($requestData);

        if ($request->wantsJson()) {
            return $this->asJson([
                'message' => __('Data created successfully'),
                'redirect_url' => route('{{routeName}}.show', ${{crudNameSingular}})
            ]);
        }

        return redirect(route('{{routeName}}.show', ${{crudNameSingular}}))->with('message', __( 'Data created successfully' ));
    }

    /**
     * @param  {{modelName}} ${{crudNameSingular}}
     * @return \Illuminate\View\View
     */
    public function show({{modelName}} ${{crudNameSingular}})
    {
        return view('{{viewName}}.show', compact('{{crudNameSingular}}'));
    }

    /**
     * @param  {{modelName}} ${{crudNameSingular}}
     * @return \Illuminate\View\View
     */
    public function edit({{modelName}} ${{crudNameSingular}})
    {
        return view('{{viewName}}.edit', [
            '{{crudNameSingular}}' => ${{crudNameSingular}},
            'method' => 'put',
            'action' => route('{{routeName}}.update', ${{crudNameSingular}})
        ]);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param  {{modelName}} ${{crudNameSingular}}
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     * @throws \Illuminate\Validation\ValidationException
     */
    public function update(Request $request, {{modelName}} ${{crudNameSingular}})
    {
        {{validationRules}}
        $requestData = $request->all();
        ${{crudNameSingular}}->update($requestData);

        if ($request->wantsJson()) {
            return $this->asJson([
                'message' => __('Data edited successfully'),
                'redirect_url' => route('{{routeName}}.show', ${{crudNameSingular}})
            ]);
        }

        return redirect(route('{{routeName}}.show', ${{crudNameSingular}}))->with('message', __( 'Data edited successfully' ));
    }

    /**
     * @param {{modelName}} ${{crudNameSingular}}
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function destroy({{modelName}} ${{crudNameSingular}})
    {
        try {
        	  ${{crudNameSingular}}->delete();
        } catch ( \Exception $e ) {
            return $this->asJson( [
                'message' => "Error: {$e->getMessage()}"
            ], $e->getCode() );
        }

        return $this->asJson( [
            'message' => __('Data deleted successfully')
        ] );
    }

    /**
     * @return mixed|\Symfony\Component\HttpFoundation\ParameterBag
     * @throws \Exception
     */
    public function destroys() {
        try {
            $ids = \request()->get( 'ids' );
            {{modelName}}::destroy( $ids );
        } catch ( \Exception $e ) {
            return $this->asJson( [
                'message' => "Error: {$e->getMessage()}"
            ], $e->getCode() );
        }

        return $this->asJson( [
            'message' => __( 'Data deleted successfully' )
        ] );
    }

    /**
     * Lấy danh sách {{modelName}} theo dạng json
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function {{crudName}}() {
        $query      = request()->get('query', '');
        $page       = request()->get('page', 1);
        $excludeIds = request()->get('excludeIds', []);
        $orderBy    = request()->get('orderBy', 'id');
        $queryBy    = request()->get('queryBy', 'name');
        $direction  = request()->get('direction', 'desc');
        $limit      = request()->get('limit', 10);

        $offset = ( $page - 1 ) * $limit;
        ${{crudName}}  = {{modelName}}::query()->select( [ 'id', 'name' ] );

        if ($excludeIds) {
            $excludeIds = is_array($excludeIds) ? $excludeIds : explode(',', $excludeIds);
            ${{crudName}}->whereNotIn('id', $excludeIds);
        }

        if ($query) {
            $filters = explode(',', $queryBy);

            $filters = collect($filters)->mapWithKeys(static function ($key, $idx) use ($query) {
                return [$idx => [$key, 'like', $query]];
            })->all();

            ${{crudName}}->orFilterWhere($filters);
        }

        $totalCount = ${{crudName}}->count();
        ${{crudName}} = ${{crudName}}->offset($offset)
                                     ->limit($limit)
                                     ->orderBy($orderBy, $direction)
                                     ->get();

        return $this->asJson( [
            'total_count' => $totalCount,
            'items'       => ${{crudName}}->toArray(),
        ] );
    }
}